/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_taskmsg_2eproto__INCLUDED
#define PROTOBUF_C_taskmsg_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _ReqExecuteTask ReqExecuteTask;
typedef struct _ReqTaskCommon ReqTaskCommon;
typedef struct _AckTaskOutput AckTaskOutput;
typedef struct _AckTaskResult AckTaskResult;


/* --- enums --- */


/* --- messages --- */

struct  _ReqExecuteTask
{
  ProtobufCMessage base;
  char *task_id;
  char *command;
};
#define REQ_EXECUTE_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&req_execute_task__descriptor) \
    , NULL, NULL }


struct  _ReqTaskCommon
{
  ProtobufCMessage base;
  char *task_id;
};
#define REQ_TASK_COMMON__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&req_task_common__descriptor) \
    , NULL }


struct  _AckTaskOutput
{
  ProtobufCMessage base;
  int32_t req_result;
  char *output;
};
#define ACK_TASK_OUTPUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ack_task_output__descriptor) \
    , 0, NULL }


struct  _AckTaskResult
{
  ProtobufCMessage base;
  int32_t req_result;
  int32_t task_result;
  char *task_str_result;
};
#define ACK_TASK_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ack_task_result__descriptor) \
    , 0, 0, NULL }


/* ReqExecuteTask methods */
void   req_execute_task__init
                     (ReqExecuteTask         *message);
size_t req_execute_task__get_packed_size
                     (const ReqExecuteTask   *message);
size_t req_execute_task__pack
                     (const ReqExecuteTask   *message,
                      uint8_t             *out);
size_t req_execute_task__pack_to_buffer
                     (const ReqExecuteTask   *message,
                      ProtobufCBuffer     *buffer);
ReqExecuteTask *
       req_execute_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   req_execute_task__free_unpacked
                     (ReqExecuteTask *message,
                      ProtobufCAllocator *allocator);
/* ReqTaskCommon methods */
void   req_task_common__init
                     (ReqTaskCommon         *message);
size_t req_task_common__get_packed_size
                     (const ReqTaskCommon   *message);
size_t req_task_common__pack
                     (const ReqTaskCommon   *message,
                      uint8_t             *out);
size_t req_task_common__pack_to_buffer
                     (const ReqTaskCommon   *message,
                      ProtobufCBuffer     *buffer);
ReqTaskCommon *
       req_task_common__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   req_task_common__free_unpacked
                     (ReqTaskCommon *message,
                      ProtobufCAllocator *allocator);
/* AckTaskOutput methods */
void   ack_task_output__init
                     (AckTaskOutput         *message);
size_t ack_task_output__get_packed_size
                     (const AckTaskOutput   *message);
size_t ack_task_output__pack
                     (const AckTaskOutput   *message,
                      uint8_t             *out);
size_t ack_task_output__pack_to_buffer
                     (const AckTaskOutput   *message,
                      ProtobufCBuffer     *buffer);
AckTaskOutput *
       ack_task_output__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ack_task_output__free_unpacked
                     (AckTaskOutput *message,
                      ProtobufCAllocator *allocator);
/* AckTaskResult methods */
void   ack_task_result__init
                     (AckTaskResult         *message);
size_t ack_task_result__get_packed_size
                     (const AckTaskResult   *message);
size_t ack_task_result__pack
                     (const AckTaskResult   *message,
                      uint8_t             *out);
size_t ack_task_result__pack_to_buffer
                     (const AckTaskResult   *message,
                      ProtobufCBuffer     *buffer);
AckTaskResult *
       ack_task_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ack_task_result__free_unpacked
                     (AckTaskResult *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ReqExecuteTask_Closure)
                 (const ReqExecuteTask *message,
                  void *closure_data);
typedef void (*ReqTaskCommon_Closure)
                 (const ReqTaskCommon *message,
                  void *closure_data);
typedef void (*AckTaskOutput_Closure)
                 (const AckTaskOutput *message,
                  void *closure_data);
typedef void (*AckTaskResult_Closure)
                 (const AckTaskResult *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor req_execute_task__descriptor;
extern const ProtobufCMessageDescriptor req_task_common__descriptor;
extern const ProtobufCMessageDescriptor ack_task_output__descriptor;
extern const ProtobufCMessageDescriptor ack_task_result__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_taskmsg_2eproto__INCLUDED */
